/* ****************************************************************************************** */


// edge pruning limit slider.
var distanceLimitSlider = document.getElementById("distanceLimit");
var distanceLimitLabel = document.getElementById("distanceLimitLabel");
distanceLimitLabel.innerHTML = "Edge distance limit <= " + distanceLimitSlider.value;

distanceLimitSlider.oninput = function() {
  distanceLimitLabel.innerHTML = "Edge distance limit <= " + distanceLimitSlider.value;
}

// viewport scale slider.
var modelScaleSlider = document.getElementById("scaleSlider");
var modelScaleLabel = document.getElementById("modelScale");
modelScaleLabel.innerHTML = "Model scale is " + modelScaleSlider.value + " units";

modelScaleSlider.oninput = function() {
  modelScaleLabel.innerHTML = "Model scale is " + modelScaleSlider.value + " units";
  let scale = Number(modelScaleSlider.value)
  //document.getElementById("svgCanvas").setAttribute("viewBox", "${-scale/2},${-scale/2},${scale},${scale}");
  d3.select("#svgCanvas").attr("viewBox", [-scale / 2, -scale / 2, scale, scale]);
}

var fileList = null;
const fileInput = document.getElementById('filein');
fileInput.addEventListener('change', (event) => {
  fileList = event.target.files;
  console.log(fileList);
});


/* ****************************************************************************************** */


var height = Number(modelScaleSlider.value),
    width = Number(modelScaleSlider.value);
const svg = d3.select("#svgCanvas").attr("viewBox", [-width / 2, -height / 2, width, height]);

drag = simulation => {
  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }
  
  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }
  
  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
  
  return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
}

color = function() {
  const scale = d3.scaleOrdinal(d3.schemeCategory10);
  return d => scale(d.group);
}


/* ****************************************************************************************** */


$("#visualizeBtn").on("click", function(event){
  event.preventDefault();
  processData();
});

// manages the centering force toggle
$("#centerForce").on("click", updateCenterForce);

function updateCenterForce() {
  if (simulation == null) { return; }
  
  var checked = document.getElementById("centerForce").checked;
  if( checked ) {
    simulation
      .force("x", null)
      .force("y", null); // remove centering force
  } else {
    simulation
      .force("x", d3.forceX())
      .force("y", d3.forceY()); // add centering force
  }
}

var fileData = null;
function readFileData(file) {
  const reader = new FileReader(); // this may break with older browsers.
  reader.onload = function(event) {
    fileData = event.target.result;
  };
  reader.readAsText(file);
}

// This function determines if a file has even been passed yet
const testData = "A 0 50 100\nB 50 0 20\nC 100 20 0";
function processData() {
  if(fileList != null) {
    readFileData(fileList[0]);
    setTimeout(waitForData, 100);
  } else {
    console.log("No file has been passed, using test data.")
    fileData = testData;
    visualizeData();
  }
}

// This funciton waits for the file to be read (files will be big so waiting is important.)
function waitForData() {
  if(fileData == null) {
    setTimeout(waitForData, 100);
    return;
  } else {
    visualizeData();
  }
}

// Global Simulation Variables
var link = null;
var node = null;
var g_links = null;
var g_nodes = null;
var simulation = null; // todo: make const

// Actually run the simulation
function visualizeData() {
  // convert string into matrix
  matrix = fileData.split("\n").map(el => el.split(" "));

  // extract names and create list of nodes for simulation
  names = [];
  for (row of matrix) {
    names.push(row.shift());
  }
  var nodes = names.map(str => Object({id : str}));
  
  // go through all connections (smartly) and create links
  let limit = Number(distanceLimitSlider.value);
  var links = [];
  for (y = 0; y < matrix.length; y++) {
    let target = names[y]; // hopefully helps w/ optimization
    for (x = y+1; x < matrix[0].length; x++) {
      let dist = Number(matrix[y][x])
      if (dist <= limit) {
        links.push( {"source":names[x], "target":target, "distance":dist} )
      }
    }
  }

  console.log(nodes);
  console.log(links);
  
  // setup the network graph simulation

  if(simulation != null) { // Case: updating
    update_simulation(nodes, links);
  } else { // Case: initializing
    init_simulation(nodes, links);
  }

}

function update_simulation(nodes, links) {

  var linkForce = d3.forceLink(links).id(d => d.id).distance(d => d.distance).iterations(1);

  simulation.stop();
  //simulation = d3.forceSimulation(nodes)
      //.alphaDecay(0.01)
  //    .force("link", linkForce)
  //    .force("charge", d3.forceManyBody())
  //    .force("x", d3.forceX())
  //    .force("y", d3.forceY());
  //simulation.alpha(1);    
  simulation.nodes(nodes).force("link", linkForce);
  simulation.alphaTarget(0.3).restart();

  //var update_links = g_links.selectAll("line")
  //    .data(links);
  //update_links.exit().remove()

    //link = g_links.selectAll("line")
    //.data(links)
    //.join("line")
      //.attr("stroke-width", d => Math.sqrt(d.value));
   
  //link = update_links.enter()
  //    .append("line")
  //    .merge(update_links);

  //var update_nodes = g_nodes.selectAll("circle")
  //    .data(nodes);
  //update_nodes.exit().remove();
  //node = update_nodes.enter()
  //    .append("circle")
  //    .merge(update_nodes);
  //node.append("title")
  //    .text(d => d.id);

//// **************************************** ////

  g_links.selectAll("line").remove();
  link = g_links.selectAll("line")
    .data(links)
    .join("line")
      .attr("stroke-width", 1.5);

  g_nodes.selectAll("circle").remove();
  node = g_nodes.selectAll("circle")
    .data(nodes)
    .join("circle")
      .attr("r", 5)
      .attr("fill", "grey")
      .call(drag(simulation));

}

function init_simulation(nodes, links) {
  var linkForce = d3.forceLink(links).id(d => d.id).distance(d => d.distance).iterations(1);
  //var width = Number(modelScaleSlider.value),
  //    height = Number(modelScaleSlider.value);

  simulation = d3.forceSimulation(nodes)
      //.alphaDecay(0.01)
      //.force("link", linkForce)
      //.force("charge", d3.forceManyBody())
      //.force("x", d3.forceX())
      //.force("x", d3.forceX())
      //.force("y", d3.forceY());
      //.force("y", d3.forceY())
      .force("link", linkForce)
      .force("charge", d3.forceManyBody().strength(-1))
      .force("center", d3.forceCenter(0, 0));

  g_links = svg.append("g")
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.7);
  link = g_links.selectAll("line")
    .data(links)
    .join("line")
      .attr("stroke-width", 1.5);
   
  g_nodes = svg.append("g")
      .attr("stroke", "#fff")
      .attr("stroke-width", 1.5)
  node = g_nodes.selectAll("circle")
    .data(nodes)
    .join("circle")
      .attr("r", 5)
      .attr("fill", "grey")
      .call(drag(simulation));

  node.append("title")
      .text(d => d.id);

  simulation.on("tick", () => {
    link
	.attr("x1", d => d.source.x)
	.attr("y1", d => d.source.y)
	.attr("x2", d => d.target.x)
	.attr("y2", d => d.target.y);
    node
	.attr("cx", d => d.x)
	.attr("cy", d => d.y);
  });
}

